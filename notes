var pj = require('pj');

var db = new pj('blake@/project_db');



var exclude_states = ['Hawaii','Alaska'];
db.from('retailers')
    .select('name','loc=location::geojson')
    .where({
        country: 'United States',
		state: pj('!=', exclude_states),
	})
	.order('name')
	.log();


`::` - "in the form of" operator (overloaded type-cast operator)
	* eg: `.select('location::geojson')`
	* eg: `.select('location::int')`

`=` - sets the output name
	* eg: `.select('locA=tableA.location', 'locB=tableB.location')`

`@` - shortcut for the `DISTINCT` operator
	* eg: `.select('@icon') ...` => `select distinct "icon" ...`

` ` - concatenates fields together using space delimiter
	* eg: `.select('color item')` => `select concat("color",' ',"item")`

`,` - concatenates fields together using comma delimiter
	* eg: `.select('a,b,c')` => `select concat("a",',',"b",',',"c")`
	* eg: `.select('a, b, c')` => `select concat("a",', ',"b",', ',"c")`

`|` - concatenates fields together using pipe delimiter
	* eg: `.select('a|b|c')` => `select concat("a",'|',"b",'|',"c")`

`/` - concatenates fields together using slash delimiter
	* eg: `.select('a / b / c')` => `select concat("a",' / ',"b",' / ',"c")`

`+` - concatenates fields together using empty string
	* eg: `.select('a+b+c')` => `select concat("a",'',"b",'',"c")`


Aggregate Functions

'%' - `avg` aggregate function

`#` - `count` function
	* eg: `.select('#id')` => `select count("id") ...`


`.` - auto-prefixes field name with the local `from` table
	* eg: `.from('oranges').join('apples').select('.id', 'apple.id')` => `select "oranges"."id", "apple"."id" from "oranges" join "apples" ...

`*` - reserved star selector
	* eg: `.select('#*') ...` => `select count(*) ...`



db.from('retailers')
	.select('geojson')


@	distinct
#	count
=	sum
%	avg
>	max
<	min
^	first
$	last


[]		array_agg
%		avg
&		bit_and
|		bit_or
&&		bool_and
||		bool_or
#		count
&&		every
'$1'	string_agg(expression, $delim)
=		sum
<$1>	xml_agg(expression, $delim)



Blocks

.select

.from

.where

.group

.having

.window // not supported

.union / .intercept / .except

.order

.limit

.offset

.fetch // use .limit and .offset instead

.for // not supported


Where Blocks
.where(some_types statement) where some_types must be one of the following:
	string:	.where(string sql)
	array:	.where(array statements)
		the statements given in an array indicates use of `OR` to join elements together
	object:	.where(object hash)

"color" = 'red'
{
	color: 'red',
}

"color" = 'red'  or  "color" = 'green'
{
	color: ['red', 'green']
}

"color" = 'red'  and  "taste" = 'good'
{
	color: 'red',
	taste: 'good'
}

("color" = 'red' or "color" = 'green')  and  "taste" = 'good'
{
	color: ['red', 'green'],
	taste: 'good'
}


("color" = 'red' and "taste" = 'good')  or  ("color" = 'green' and "taste" = 'okay')
[
	{
		color: 'red',
		taste: 'good'
	},
	{
		color: 'green',
		taste: 'okay'
	}
]

"color" = 'red' and ("taste" = 'good' or "quality" = 'organic')
pj({ color: 'red' },
	[
		{ taste: 'good' },
		{ quality: 'organic' },
	]
)


### AND-ing

Objects at the same tier within the same hash are AND-ed together:
{ color: 'red', taste: 'good' } => ("color" = 'red' and "taste" = 'good')

For AND-ing comparisons that require nested OR operations, use the `pj` handle function
pj(
	{ color: 'red' },
	[
		{ taste: 'good' },
		{ quality: 'organic'}
	],
)


### OR-ing
Things at the same depth within the same array are OR-ed together:
[
	{ color: 'red' },
	[ { taste: 'great' }, { taste: 'good', color: 'green' } ]
]
	=>  "color" = 'red' or ("taste" = 'great' or ("taste" = 'good' and "color" = 'green'))


### Implicit joining
{
	color: 'red',
	item: {
		in_stock: true,
	}
}
	=> join "item" on "fruit"."item_id" = "item"."id"
		where "fruit"."color" = 'red' and "item"."in_stock" = 'true'


### Comparisons
{
	color: 'red',
	weight: pj('>', 0.6)
}

{
	quality: pj('!=', 'poor')
}

{
	taste: pj('like', ['okay','good','great'])
}


## Select Clause

```js
.select(field_1 [, field_2, ..., field_n)
```

Where `typeof field_` must be either `string` or `object`. The `string` version supports a strict syntax for specifying column names, creating an alias, aggregating rows, using SQL operators, and type casting. The following section documents this syntax.

### Fields

There are several different ways to access a field, each one has a specific purpose.


#### Named Identifiers

Using standard PostgreSQL identifier characters in the select-syntax string will yield a named identifier. 

```js
	.from('post').select('id')
```
yields:
```sql
	select "id" from "post"
```

This can be useful for selecting aliases created elsewhere in the statement, but it is prone to ambiguation when multiple tables are joined together. To reference a column when there is more than one table present, you should use absolute references.


#### Absolute References

Prefixing the column name with a dot will produce an absolute reference to that column by using the name of the primary table specified in the `from` clause:

```js
	.from('post').select('.id')
```
yiels:
```sql
	select "post"."id" from "post"
```

It is typically a best practice to use absolute references when joining tables in order to prevent conflicts of columns with the same name from different tables:

```js
	.from('post').selet('post.id', 'user.id', 'user.name')
```

yields *(assuming the `post <-> user` table relationship is defined)*:
```sql
	select "post"."id", "user"."id", "user"."name" from "post" join "user" on "user"."id" = "post"."user_id"
```


#### Aliasing

Any field (including the outputs of functions) can be aliased by using the `=` operator:

```js
	.from('post').select('post_id=post.id')
```
yields:
```sql
	select "post"."id" as "post_id" from "post"
```

Aliasing the table specified in the `from` clause will also be reflected in the dotal-prefix syntax:

```js
	.from('p=post').select('.id')
```
yields:
```sql
	select "p"."id" from "post" as "p"
```


### Type Casting

Any field (including the outputs of functions) can be cast into alternate data types by using the `::` operator.


#### Native Data Types

(PostgreSQL Data Types)[http://www.postgresql.org/docs/9.4/static/datatype.html] can simply be placed after the `::` operator for casting to those types:

```js
	.select('post.score::int')
```
yields:
```sql
	select "post"."score"::int
```

Some native data types also accept arguments:

```js
	.select('post.score::decimal(6,4)')
```
yields:
```sql
	select "post"."score"::decimal(6,4)
```


#### Custom Type Casters / Function Substitution

```js
	pj.type(string typeDef, string outputSub)
	pj.type(string typeDef, function outputGen)
```

You can define your own type casters. 

Passing a string into the `output` parameter will essentially substitue the field and any input arguments into the formatted string:

```js

	// defines a custom type, globally
	pj.type('epoch_ms', 'extract(epoch from $0) * 1000');

	db.select('time::epoch_ms').from('post')
```
yields:
```sql
	select extract(epoch from "time") * 1000 as "time" from "post"
```

Parameters/variables are prefixed with a `$` symbol. `$0` indicates the field that precedes the `::` operator, although the above function can also be invoked like this:

```js
	.select('epoch_ms(time)').from('post')
```
yields:
```sql
	select extract(epoch from "time") * 1000 as "time" from "post"
```

When creating a custom type caster, if the parameter name is an integer then the subsequent replacement will yield the matching field name:

```js
	pj.type('properName($1)', "concat($1, ',', $0)");
	db.from('user').select('properName(firstName, lastName)')
```
yields:
```sql
	select concat("lastName", ',', "firstName") as "properName" from "user"
```

Using named parameters will substitute escaped values into the string:
```js
	// specifies an optional parameter
	pj.type('epoch_ms($tz=UTC)', "extract(epoch from $0 at time zone $tz)");

	db.select('time::epoch_ms').from('post');
	db.select('time::epoch_ms()').from('post');
	db.select('time::epoch_ms(PST)').from('post');
```
yields (respectively):
```sql
	select extract(epoch from "time" at time zone 'UTC') as "time" from "post";
	select extract(epoch from "time" at time zone 'UTC') as "time" from "post";
	select extract(epoch from "time" at time zone 'PST') as "time" from "post";
```

If you wish to insert non-values (such as SQL keywords) into the query, you may prefix the variable name with `_`:
```js
	pj.type('addTime($_type,$value)', '$0 + $_type $value');
	db.from('post').select('.time::addTime(interval, 3 hours)');
```
yields:
```sql
	select "post"."time" + interval '3 hours'
```

Notice how the arguments to the call are not enclosed by any quotes. Arguments are terminated by the `)` character; for subtitution strings they are split by `,` delimiter. Custom type casters that specify a function instead of a string however receive the entire text within the `(` `)` characters (ie: the text is not split). This allows the handling function to parse the arguments however it wants (albeit devoid of any right parenthesis characters).


#### PostGIS Type Casters

By default, `pj` provides some custom types that alias PostGIS Geometry Functions](http://postgis.net/docs/manual-2.1/reference.html) for constructing, accessing, editing, and outputting geometry data:

For example:
```js
	.from('buildings').select('boundary::rotateX(90deg)::geojson')
```
yields:
```sql
	select ST_AsGeoJSON(ST_RotateX("boundary", pi()*0.5)) as "boundary" from "building"
```

Here is a table that shows which functions are mapped to by their equivalent type cast alias:

| PostGIS Function | `pj` Type Equivalent |
| ---------------- | -------------------- |
| ST_AsGeoJSON 	| geojson 	|
| ST_AsKML 		| kml  		|
| ST_AsText 	| wkt 		|
| ST_AsEWKT		| ewkt 		|
| ST_AsEWKB		| ewkb 		|
| ST_AsBinary	| binary 	|
| ST_AsGeoHash 	| geohash 	|
| ST_AsSVG 		| svg 		|
| ST_AsLatLonText | latlon 	|
| | |
| ST_GeomFromText	| wkt_geom |
| ST_GeomFromWKB	| wkb_geom	|
| ST_GeomFromEWKB	| ewkb_geom	|
| ST_GeomFromEWKT	| ewkt_geom	|
| ST_GeomFromGeoHash	| geohash_geom	|
| ST_GeomFromGML	| gml_geom	|
| ST_GeomFromGeoJSON	| geojson_geom	|
| ST_GeomFromKML	| kml_geom	|
| | |
| ST_GeogFromText	| wkt_geog |
| ST_GeogFromWKB	| wkb_geog	|
| ST_GeogFromEWKB	| ewkb_geog	|
| ST_GeogFromEWKT	| ewkt_geog	|
| | |



### Selecting Literals (Slash-Notation)

To generate values (single-quoted literals) within the select clause, you can use this special slash-notation:

```js
	.from().select('/This is a string/')
```
yields:
```sql
	select 'This is a string'
```

Any single-quotes within the `/` delimiters are escaped:
```js
	.from().select("/This is a 'string'/")
```
yields:
```sql
	select 'This is a ''string'''
```

The first and last occurences of the `/` delimiter set the bounds for the value, so you do not need to worry about escaping extra `/` characters:
```js
	var text = "Don't worry / I'm safe!";
	db.from().select('output=/'+text+'/')
```
yields:
```sql
	select 'Don''t worry / I''m safe!' as "output"
```

The slash-notation is convenient for constructing geometry with PostGIS:

```js
	.select('pointA=/point(34.72 -118.25)/::wkt_geom','pointB=/point(36.12 -119.4)/::wkt_geom','distance(pointA,pointB)')
```

```sql
	select ST_GeomFromWKT('point(34.72 -118.25)') as "pointA", ST_GeomFromWKT('point(36.12 -119.4)') as "pointB", ST_Distance("pointA", "pointB") as "distance"
```

	'count(*)'
	'#(*)'
	'#*'

	'@city'

	'count(@city)'
	'#(@city)'
	'#@city'
	'num_cities=#@city'

	'max(salary)'
	'max_salary=max(salary)'
	'max_salary=salary::max'


### Mathematical Operations

Since several of the special characters are used by `pj` for [various purposes](#select-operators), you can write mathematical expressions within the `{` `}` characters:

So, normally:
```js
	.select('@x+y')
```
yields:
```sql
	select distinct concat("x", "y")
```

However:
```js
	.select('{@x+y}')
```
yields:
```sql
	select @ "x" + "y"
```

Slash-notation is excluded from these ranges, so if you intend to use mathematical operators with numeric literals you can simply write it thusly:

```js
	.select('{|/ 25.0}') // square root of 25.0
```
yields:
```sql
	select |/ 25.0
```


### Custom Type Casting
pj.type("epoch_ms", "extract(epoch from $0) * 1000");

db.select('time::epoch_ms')... 
	=> select extract(epoch from "time") * 1000 as "time"

pj.type("epoch_ms($tz='UTC')", "extract(epoch from $0 at time zone '$tz') * 1000");

db.select('time::epoch_ms')
	=> select extract(epoch from "time" at time zone 'UTC') * 1000 as "time"

db.select('time::epoch_ms(PST)')
	=> select extract(epoch from "time" at time zone 'PST') * 1000 as "time"


### Aggregate functions

.select("','id")
	=> select string_agg("id", ',')